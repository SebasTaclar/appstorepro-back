# Test Azure Functions API Endpoints with Authentication
# Variable para almacenar el token - actualizar después del login
@token = 

### Variables de entorno
@baseUrl = http://localhost:7071

###
# ENDPOINTS PÚBLICOS (Sin autenticación requerida)
###

### 1. Health Check - No requiere autenticación
GET {{baseUrl}}/api/funcHealthDB

### 2. Login with Admin User - Obtener token
# @name loginAdmin
POST {{baseUrl}}/api/funcLogin
Content-Type: application/json

{
  "email": "admin@example.com",
  "password": "admin123"
}

### 3. Login with Regular User
# @name loginUser
POST {{baseUrl}}/api/funcLogin
Content-Type: application/json

{
  "email": "user@example.com",
  "password": "user123"
}

### 4. Login with Invalid Credentials - Error Response
POST {{baseUrl}}/api/funcLogin
Content-Type: application/json

{
  "email": "invalid@example.com",
  "password": "invalid"
}

###
# ENDPOINTS PROTEGIDOS (Requieren autenticación JWT)
###

### 5. Create User - CON token válido (actualizar @token con el valor del login)
POST {{baseUrl}}/api/funcCreateUser
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "email": "newuser@example.com",
  "password": "newuser123",
  "name": "New User",
  "role": "user",
  "membershipPaid": false
}

### 6. Create User - SIN token (debe fallar con 401)
POST {{baseUrl}}/api/funcCreateUser
Content-Type: application/json

{
  "email": "unauthorized@example.com",
  "password": "test123",
  "name": "Unauthorized User",
  "role": "user"
}

### 7. Create User - Con token inválido (debe fallar con 401)
POST {{baseUrl}}/api/funcCreateUser
Content-Type: application/json
Authorization: Bearer invalid_token_here

{
  "email": "invalidtoken@example.com",
  "password": "test123",
  "name": "Invalid Token User",
  "role": "user"
}

### 8. Create User - Con header Authorization mal formateado (debe fallar con 401)
POST {{baseUrl}}/api/funcCreateUser
Content-Type: application/json
Authorization: {{token}}

{
  "email": "malformed@example.com",
  "password": "test123",
  "name": "Malformed Auth User",
  "role": "user"
}

###
# CATEGORIES ENDPOINTS (Require JWT Authentication)
###

### 9. Obtener todas las categorías - CON token válido
GET {{baseUrl}}/api/v1/categories
Authorization: Bearer {{token}}

### 10. Obtener todas las categorías con filtro por nombre
GET {{baseUrl}}/api/v1/categories?name=tecnologia
Authorization: Bearer {{token}}

### 11. Obtener todas las categorías con filtro por descripción
GET {{baseUrl}}/api/v1/categories?description=wallpapers
Authorization: Bearer {{token}}

### 12. Obtener categoría por ID (usar ID existente)
GET {{baseUrl}}/api/v1/categories/1
Authorization: Bearer {{token}}

### 13. Obtener categoría por ID inexistente (debe fallar con 404)
GET {{baseUrl}}/api/v1/categories/999999
Authorization: Bearer {{token}}

### 14. Obtener categoría con ID inválido (debe fallar con 400)
GET {{baseUrl}}/api/v1/categories/abc
Authorization: Bearer {{token}}

### 15. Obtener categorías SIN token (debe fallar con 401)
GET {{baseUrl}}/api/v1/categories

### 16. Crear nueva categoría - Solo nombre
POST {{baseUrl}}/api/v1/categories
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "name": "Tecnología"
}

### 17. Crear nueva categoría - Con descripción
POST {{baseUrl}}/api/v1/categories
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "name": "Naturaleza",
  "description": "Wallpapers de paisajes naturales, montañas, bosques y océanos"
}

### 18. Crear nueva categoría - Con nombre duplicado (debe fallar con 400)
POST {{baseUrl}}/api/v1/categories
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "name": "Tecnología"
}

### 19. Crear nueva categoría - Sin nombre (debe fallar con 400)
POST {{baseUrl}}/api/v1/categories
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "description": "Descripción sin nombre"
}

### 20. Crear nueva categoría - Cuerpo vacío (debe fallar con 400)
POST {{baseUrl}}/api/v1/categories
Content-Type: application/json
Authorization: Bearer {{token}}

{}

### 21. Crear categoría SIN token (debe fallar con 401)
POST {{baseUrl}}/api/v1/categories
Content-Type: application/json

{
  "name": "Sin Token"
}

### 22. Actualizar categoría - Solo nombre
PUT {{baseUrl}}/api/v1/categories/1
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "name": "Tecnología Actualizada"
}

### 23. Actualizar categoría - Solo descripción
PUT {{baseUrl}}/api/v1/categories/1
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "description": "Nueva descripción para tecnología"
}

### 24. Actualizar categoría - Nombre y descripción
PUT {{baseUrl}}/api/v1/categories/1
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "name": "Tech & Gadgets",
  "description": "Wallpapers de tecnología, gadgets y elementos futuristas"
}

### 25. Actualizar categoría - Con nombre duplicado (debe fallar con 400)
PUT {{baseUrl}}/api/v1/categories/1
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "name": "Naturaleza"
}

### 26. Actualizar categoría - ID inexistente (debe fallar con 404)
PUT {{baseUrl}}/api/v1/categories/999999
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "name": "Categoría Inexistente"
}

### 27. Actualizar categoría - ID inválido (debe fallar con 400)
PUT {{baseUrl}}/api/v1/categories/abc
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "name": "Test"
}

### 28. Actualizar categoría - Sin datos (debe fallar con 400)
PUT {{baseUrl}}/api/v1/categories/1
Content-Type: application/json
Authorization: Bearer {{token}}

{}

### 29. Actualizar categoría SIN token (debe fallar con 401)
PUT {{baseUrl}}/api/v1/categories/1
Content-Type: application/json

{
  "name": "Sin Token"
}

### 30. Eliminar categoría - ID válido
DELETE {{baseUrl}}/api/v1/categories/1
Authorization: Bearer {{token}}

### 31. Eliminar categoría - ID inexistente (debe fallar con 404)
DELETE {{baseUrl}}/api/v1/categories/999999
Authorization: Bearer {{token}}

### 32. Eliminar categoría - ID inválido (debe fallar con 400)
DELETE {{baseUrl}}/api/v1/categories/abc
Authorization: Bearer {{token}}

### 33. Eliminar categoría SIN token (debe fallar con 401)
DELETE {{baseUrl}}/api/v1/categories/1

###
# EJEMPLOS PARA COPIAR TOKEN MANUALMENTE
###

### Instrucciones:
# 1. Ejecutar uno de los requests de login (2 o 3)
# 2. Copiar el valor del token de la respuesta
# 3. Actualizar la variable @token al inicio del archivo
# 4. Ejecutar los endpoints protegidos

### Ejemplo de respuesta exitosa de login:
# {
#   "success": true,
#   "data": {
#     "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
#   },
#   "message": "Login successful",
#   "timestamp": "2025-08-03T10:30:00.000Z",
#   "statusCode": 200
# }

### Ejemplo de respuesta de error de autenticación:
# {
#   "success": false,
#   "message": "Unauthorized: Missing authorization header",
#   "timestamp": "2025-08-03T10:30:00.000Z",
#   "statusCode": 401
# }
